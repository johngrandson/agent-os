[tool.poetry]
name = "agent-os"
version = "0.1.0"
description = ""
authors = ["Jo√£o Netto <joaonettopb@hotmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = { extras = ["standard"], version = "^0.117.1" }
uvicorn = "^0.36.0"
openai = "^1.108.1"
ruff = "^0.13.1"
dependency-injector = "^4.48.1"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.0" }
asyncpg = "^0.29.0"
python-dotenv = "^1.0.0"
pydantic = "^2.0.0"
pydantic-settings = "^2.0.0"
cryptography = "^42.0.0"
pgvector = "^0.3.0"
pypdf = "^5.1.0"
aiohttp = "^3.9.0"
agno = "^2.0.7"
psycopg2-binary = "^2.9.10"
psycopg = "^3.1.0"
redis = "^5.0.0"
redisvl = "^0.3.0"
faststream = { extras = ["redis"], version = "^0.5.0" }
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
alembic = "^1.16.5"
transformers = "^4.35.0"
torch = "^2.1.0"


[tool.poetry.group.dev.dependencies]
mypy = "^1.18.2"
pre-commit = "^4.3.0"
pytest-cov = "^4.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration for import organization
# Place this file in your project root as 'ruff.toml' or 'pyproject.toml'

[tool.ruff]
# Set the maximum line length
line-length = 100

# Python version target
target-version = "py311"

# Lint rules configured under [tool.ruff.lint]

# Exclude directories from linting
exclude = [
  ".git",
  ".venv",
  "venv",
  "__pycache__",
  ".mypy_cache",
  ".pytest_cache",
  "build",
  "dist",
  "scripts",
  "examples",
]

# Treat these as first-party roots for import classification
src = ["app", "core", "infrastructure", "scripts", "examples"]

[tool.ruff.lint]
# Enable specific rule sets (more conservative selection)
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort (import sorting)
  "UP",  # pyupgrade
  "B",   # flake8-bugbear (with exceptions)
  "C4",  # flake8-comprehensions
  "T10", # flake8-debugger
]

# Ignore overly strict rules that cause CI issues
ignore = [
  "DTZ",  # flake8-datetimez - too strict for many use cases
  "EM",   # flake8-errmsg - forces f-strings in error messages unnecessarily
  "PIE",  # flake8-pie - can be too opinionated
  "RSE",  # flake8-raise - forces specific raise patterns
  "RET",  # flake8-return - too strict about return patterns
  "SIM",  # flake8-simplify - often suggests changes that reduce readability
  "PTH",  # flake8-use-pathlib - not always practical for all use cases
  "B017", # Do not assert blind exception - too strict for tests
]

# Per-file ignores for more flexibility
[tool.ruff.lint.per-file-ignores]
# Test files - allow more flexibility
"tests/**/*.py" = [
  "B017",  # Allow assert Exception in tests
  "SIM105", # Allow try-except-pass in tests
  "PLR2004", # Allow magic values in tests
  "S101",  # Allow assert in tests
  "F401",  # Allow unused imports in test files (fixtures, etc.)
]

# API files - FastAPI specific exceptions
"app/**/api/*.py" = [
  "B008",  # Do not perform function calls in argument defaults (FastAPI Depends)
]

# Migration files - allow more flexibility
"**/alembic/versions/*.py" = [
  "F401",  # Allow unused imports in migrations
]

# Scripts - development/utility scripts can be less strict
"scripts/**/*.py" = [
  "T201",  # Allow print statements in scripts
  "S101",  # Allow assert statements in scripts
]

# isort configuration
[tool.ruff.lint.isort]
# Known first-party modules
known-first-party = ["agent_os"]

# Section order for imports
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]

# Basic isort settings
combine-as-imports = true
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with 4 spaces
indent-style = "space"

# Unix-style line endings
line-ending = "lf"

# Format docstrings
docstring-code-format = true

# Format code in docstrings with a specific line length
docstring-code-line-length = 72

[tool.mypy]
# Basic mypy configuration
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true

# STRICT TYPE CHECKING - require types for all functions
disallow_untyped_defs = true          # All functions must have type annotations
disallow_incomplete_defs = true       # Functions with some type annotations must have complete annotations
check_untyped_defs = true            # Check function bodies even if no type annotations
disallow_untyped_decorators = false   # Keep lenient for decorators (FastAPI, etc.)

# Type checking improvements
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true                # Warn if function should return None but doesn't
warn_unreachable = true              # Warn about unreachable code
strict_equality = true               # Use strict equality checks

# Keep current practices for third-party libraries
ignore_missing_imports = true

# Fix duplicate module names issue - proper solution
explicit_package_bases = true
namespace_packages = true
mypy_path = "."

# Be more lenient with third-party libraries
follow_imports = "silent"
show_error_codes = true

# Focus on core business logic, skip external library integrations
exclude = [
    "^scripts/",
    "^examples/",
    "^build/",
    "^dist/",
    "app/services/ai/.*",
    "app/providers/.*"
]

[tool.pytest.ini_options]
# Configure pytest-asyncio
asyncio_mode = "auto"
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Output
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
# Custom markers
markers = [
    "unit: Unit tests for individual functions",
    "integration: Integration tests for CLI generator",
    "api: API endpoint tests",
    "pluralization: Tests related to pluralization logic",
    "failing: Tests that demonstrate current bugs (should fail)",
    "compound_words: Tests for compound word pluralization",
    "english_rules: Tests for special English pluralization rules",
]
