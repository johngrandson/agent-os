name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  POETRY_VERSION: "1.7.1"
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_agent_os
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Set up test environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_agent_os" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV
          echo "HUGGINGFACE_API_TOKEN=" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          poetry run alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_agent_os
          WRITER_DB_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_agent_os
          READER_DB_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_agent_os

      - name: Run tests with coverage
        run: |
          poetry run pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=50 \
            --junitxml=pytest.xml \
            -v
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_agent_os
          WRITER_DB_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_agent_os
          READER_DB_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_agent_os
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: dorny/test-reporter@v1
        if: always() && hashFiles('pytest.xml') != ''
        with:
          name: pytest-results
          path: pytest.xml
          reporter: java-junit
          fail-on-error: false

      - name: Test report summary
        if: always()
        run: |
          echo "### Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "Tests completed. Check the job output for detailed results." >> $GITHUB_STEP_SUMMARY

  type-check:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run mypy type checking
        run: poetry run mypy app/ --ignore-missing-imports --explicit-package-bases
