"""Add team and enhanced knowledge models with proper imports

Revision ID: c594c010a2e2
Revises: 90c3638fe282
Create Date: 2025-09-21 23:13:42.438754

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = "c594c010a2e2"
down_revision: Union[str, None] = "90c3638fe282"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "integration_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("integration_id", sa.UUID(), nullable=False),
        sa.Column("method", sa.String(length=10), nullable=False),
        sa.Column("endpoint", sa.Text(), nullable=False),
        sa.Column("request_data", sa.JSON(), nullable=True),
        sa.Column("request_headers", sa.JSON(), nullable=True),
        sa.Column("success", sa.Boolean(), nullable=False),
        sa.Column("status_code", sa.Integer(), nullable=True),
        sa.Column("response_data", sa.JSON(), nullable=True),
        sa.Column("response_headers", sa.JSON(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("execution_time", sa.Float(), nullable=True),
        sa.Column("triggered_by", sa.String(length=100), nullable=True),
        sa.Column("context", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "integrations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("integration_type", sa.String(length=100), nullable=False),
        sa.Column("base_url", sa.Text(), nullable=False),
        sa.Column("auth_type", sa.String(length=50), nullable=False),
        sa.Column("credentials", sa.JSON(), nullable=True),
        sa.Column("settings", sa.JSON(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("timeout", sa.Integer(), nullable=False),
        sa.Column("rate_limit_config", sa.JSON(), nullable=True),
        sa.Column("retry_config", sa.JSON(), nullable=True),
        sa.Column("last_health_check", sa.DateTime(), nullable=True),
        sa.Column("health_status", sa.String(length=50), nullable=True),
        sa.Column("health_message", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "webhook_deliveries",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("webhook_endpoint_id", sa.UUID(), nullable=False),
        sa.Column("headers", sa.JSON(), nullable=True),
        sa.Column("payload", sa.JSON(), nullable=True),
        sa.Column("signature", sa.String(length=255), nullable=True),
        sa.Column("processed", sa.Boolean(), nullable=False),
        sa.Column("success", sa.Boolean(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("events_created", sa.Integer(), nullable=False),
        sa.Column("processing_time", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "webhook_endpoints",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("integration_id", sa.UUID(), nullable=False),
        sa.Column("endpoint_path", sa.String(length=255), nullable=False),
        sa.Column("webhook_secret", sa.String(length=255), nullable=True),
        sa.Column("expected_content_type", sa.String(length=100), nullable=False),
        sa.Column("event_mapping", sa.JSON(), nullable=True),
        sa.Column("transformation_rules", sa.JSON(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("last_received", sa.DateTime(), nullable=True),
        sa.Column("total_received", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "knowledge_contexts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column("context_type", sa.String(length=100), nullable=False),
        sa.Column("context_key", sa.String(length=255), nullable=False),
        sa.Column("context_value", sa.JSON(), nullable=False),
        sa.Column(
            "embedding", pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True
        ),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("expiry", sa.String(), nullable=True),
        sa.Column("usage_count", sa.Integer(), nullable=False),
        sa.Column("last_used", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agents.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_knowledge_contexts_agent_id",
        "knowledge_contexts",
        ["agent_id"],
        unique=False,
    )
    op.create_index(
        "ix_knowledge_contexts_context_key",
        "knowledge_contexts",
        ["context_key"],
        unique=False,
    )
    op.create_index(
        "ix_knowledge_contexts_context_type",
        "knowledge_contexts",
        ["context_type"],
        unique=False,
    )
    op.create_index(
        "ix_knowledge_contexts_embedding",
        "knowledge_contexts",
        ["embedding"],
        unique=False,
        postgresql_using="ivfflat",
    )
    op.create_index(
        "ix_knowledge_contexts_priority",
        "knowledge_contexts",
        ["priority"],
        unique=False,
    )
    op.create_table(
        "tasks",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "task_type",
            sa.Enum(
                "SIMPLE",
                "RESEARCH",
                "ANALYSIS",
                "COMMUNICATION",
                "AUTOMATION",
                "CUSTOMER_SERVICE",
                "SALES",
                "SUPPORT",
                name="tasktype",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "CANCELLED",
                name="taskstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "priority",
            sa.Enum("LOW", "NORMAL", "HIGH", "URGENT", name="taskpriority"),
            nullable=False,
        ),
        sa.Column("assigned_agent_id", sa.UUID(), nullable=True),
        sa.Column("assigned_by", sa.String(length=255), nullable=True),
        sa.Column("parent_task_id", sa.UUID(), nullable=True),
        sa.Column("parameters", sa.JSON(), nullable=True),
        sa.Column("expected_tools", sa.JSON(), nullable=True),
        sa.Column("results", sa.JSON(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("started_at", sa.String(length=50), nullable=True),
        sa.Column("completed_at", sa.String(length=50), nullable=True),
        sa.Column("execution_time", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["assigned_agent_id"],
            ["agents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_task_id"],
            ["tasks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "teams",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("team_type", sa.String(length=50), nullable=False),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("leader_id", sa.UUID(), nullable=True),
        sa.Column("max_members", sa.Integer(), nullable=False),
        sa.Column("auto_assign_tasks", sa.Boolean(), nullable=False),
        sa.Column("coordination_strategy", sa.JSON(), nullable=True),
        sa.Column("total_tasks_completed", sa.Integer(), nullable=False),
        sa.Column("success_rate", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["leader_id"],
            ["agents.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "agent_memories",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("summary", sa.Text(), nullable=True),
        sa.Column("keywords", sa.JSON(), nullable=True),
        sa.Column(
            "embedding", pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True
        ),
        sa.Column("memory_type", sa.String(length=50), nullable=False),
        sa.Column("priority", sa.String(length=50), nullable=False),
        sa.Column("source", sa.String(length=50), nullable=False),
        sa.Column("context_data", sa.JSON(), nullable=True),
        sa.Column("related_task_id", sa.UUID(), nullable=True),
        sa.Column("related_conversation_id", sa.UUID(), nullable=True),
        sa.Column("access_count", sa.Integer(), nullable=False),
        sa.Column("last_accessed", sa.String(), nullable=True),
        sa.Column("is_archived", sa.Boolean(), nullable=False),
        sa.Column("retention_days", sa.Integer(), nullable=True),
        sa.Column("expires_at", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_task_id"],
            ["tasks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_agent_memories_agent_id", "agent_memories", ["agent_id"], unique=False
    )
    op.create_index(
        "ix_agent_memories_embedding",
        "agent_memories",
        ["embedding"],
        unique=False,
        postgresql_using="ivfflat",
    )
    op.create_index(
        "ix_agent_memories_memory_type", "agent_memories", ["memory_type"], unique=False
    )
    op.create_index(
        "ix_agent_memories_priority", "agent_memories", ["priority"], unique=False
    )
    op.create_index(
        "ix_agent_memories_source", "agent_memories", ["source"], unique=False
    )
    op.create_table(
        "conversation_sessions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("user_id", sa.String(length=255), nullable=True),
        sa.Column("primary_agent_id", sa.UUID(), nullable=True),
        sa.Column("team_id", sa.UUID(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("message_count", sa.Integer(), nullable=False),
        sa.Column("context", sa.JSON(), nullable=True),
        sa.Column("settings", sa.JSON(), nullable=True),
        sa.Column("tags", sa.JSON(), nullable=True),
        sa.Column("session_metadata", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["primary_agent_id"],
            ["agents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_conversation_sessions_is_active",
        "conversation_sessions",
        ["is_active"],
        unique=False,
    )
    op.create_index(
        "ix_conversation_sessions_primary_agent_id",
        "conversation_sessions",
        ["primary_agent_id"],
        unique=False,
    )
    op.create_index(
        "ix_conversation_sessions_team_id",
        "conversation_sessions",
        ["team_id"],
        unique=False,
    )
    op.create_index(
        "ix_conversation_sessions_user_id",
        "conversation_sessions",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "team_conversations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("team_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("message_count", sa.Integer(), nullable=False),
        sa.Column("participants", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "team_coordinations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("team_id", sa.UUID(), nullable=False),
        sa.Column("objective", sa.Text(), nullable=False),
        sa.Column("strategy", sa.String(length=100), nullable=False),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("progress", sa.Float(), nullable=False),
        sa.Column("plan", sa.JSON(), nullable=True),
        sa.Column("assignments", sa.JSON(), nullable=True),
        sa.Column("results", sa.JSON(), nullable=True),
        sa.Column("started_at", sa.String(), nullable=True),
        sa.Column("completed_at", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "team_members",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("team_id", sa.UUID(), nullable=False),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column("role", sa.String(length=50), nullable=False),
        sa.Column("permissions", sa.JSON(), nullable=True),
        sa.Column("joined_at", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "team_tasks",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("team_id", sa.UUID(), nullable=False),
        sa.Column("task_id", sa.UUID(), nullable=False),
        sa.Column("assigned_by", sa.UUID(), nullable=True),
        sa.Column("coordination_plan", sa.JSON(), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("progress", sa.Float(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["assigned_by"],
            ["agents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "conversation_messages",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("session_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("message_type", sa.String(length=50), nullable=False),
        sa.Column("sender_type", sa.String(length=50), nullable=False),
        sa.Column("sender_id", sa.String(length=255), nullable=True),
        sa.Column("sender_name", sa.String(length=255), nullable=True),
        sa.Column(
            "embedding", pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True
        ),
        sa.Column("message_metadata", sa.JSON(), nullable=True),
        sa.Column("tools_used", sa.JSON(), nullable=True),
        sa.Column("execution_time", sa.Float(), nullable=True),
        sa.Column("reply_to_id", sa.UUID(), nullable=True),
        sa.Column("is_edited", sa.Boolean(), nullable=False),
        sa.Column("edited_at", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["reply_to_id"],
            ["conversation_messages.id"],
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["conversation_sessions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_conversation_messages_created_at",
        "conversation_messages",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        "ix_conversation_messages_embedding",
        "conversation_messages",
        ["embedding"],
        unique=False,
        postgresql_using="ivfflat",
    )
    op.create_index(
        "ix_conversation_messages_sender_id",
        "conversation_messages",
        ["sender_id"],
        unique=False,
    )
    op.create_index(
        "ix_conversation_messages_sender_type",
        "conversation_messages",
        ["sender_type"],
        unique=False,
    )
    op.create_index(
        "ix_conversation_messages_session_id",
        "conversation_messages",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "semantic_searches",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("agent_id", sa.UUID(), nullable=True),
        sa.Column("query", sa.Text(), nullable=False),
        sa.Column(
            "query_embedding",
            pgvector.sqlalchemy.vector.VECTOR(dim=1536),
            nullable=True,
        ),
        sa.Column("search_type", sa.String(length=50), nullable=False),
        sa.Column("filters", sa.JSON(), nullable=True),
        sa.Column("limit_results", sa.Integer(), nullable=False),
        sa.Column("results_count", sa.Integer(), nullable=False),
        sa.Column("results", sa.JSON(), nullable=True),
        sa.Column("execution_time", sa.Float(), nullable=True),
        sa.Column("similarity_threshold", sa.Float(), nullable=False),
        sa.Column("session_id", sa.UUID(), nullable=True),
        sa.Column("task_id", sa.UUID(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["conversation_sessions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_semantic_searches_agent_id", "semantic_searches", ["agent_id"], unique=False
    )
    op.create_index(
        "ix_semantic_searches_query_embedding",
        "semantic_searches",
        ["query_embedding"],
        unique=False,
        postgresql_using="ivfflat",
    )
    op.create_index(
        "ix_semantic_searches_search_type",
        "semantic_searches",
        ["search_type"],
        unique=False,
    )
    op.create_index(
        "ix_semantic_searches_session_id",
        "semantic_searches",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "team_messages",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("sender_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("message_type", sa.String(length=50), nullable=False),
        sa.Column("reply_to_id", sa.UUID(), nullable=True),
        sa.Column("message_metadata", sa.JSON(), nullable=True),
        sa.Column("is_edited", sa.Boolean(), nullable=False),
        sa.Column("edited_at", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["team_conversations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reply_to_id"],
            ["team_messages.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["agents.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("team_messages")
    op.drop_index("ix_semantic_searches_session_id", table_name="semantic_searches")
    op.drop_index("ix_semantic_searches_search_type", table_name="semantic_searches")
    op.drop_index(
        "ix_semantic_searches_query_embedding",
        table_name="semantic_searches",
        postgresql_using="ivfflat",
    )
    op.drop_index("ix_semantic_searches_agent_id", table_name="semantic_searches")
    op.drop_table("semantic_searches")
    op.drop_index(
        "ix_conversation_messages_session_id", table_name="conversation_messages"
    )
    op.drop_index(
        "ix_conversation_messages_sender_type", table_name="conversation_messages"
    )
    op.drop_index(
        "ix_conversation_messages_sender_id", table_name="conversation_messages"
    )
    op.drop_index(
        "ix_conversation_messages_embedding",
        table_name="conversation_messages",
        postgresql_using="ivfflat",
    )
    op.drop_index(
        "ix_conversation_messages_created_at", table_name="conversation_messages"
    )
    op.drop_table("conversation_messages")
    op.drop_table("team_tasks")
    op.drop_table("team_members")
    op.drop_table("team_coordinations")
    op.drop_table("team_conversations")
    op.drop_index(
        "ix_conversation_sessions_user_id", table_name="conversation_sessions"
    )
    op.drop_index(
        "ix_conversation_sessions_team_id", table_name="conversation_sessions"
    )
    op.drop_index(
        "ix_conversation_sessions_primary_agent_id", table_name="conversation_sessions"
    )
    op.drop_index(
        "ix_conversation_sessions_is_active", table_name="conversation_sessions"
    )
    op.drop_table("conversation_sessions")
    op.drop_index("ix_agent_memories_source", table_name="agent_memories")
    op.drop_index("ix_agent_memories_priority", table_name="agent_memories")
    op.drop_index("ix_agent_memories_memory_type", table_name="agent_memories")
    op.drop_index(
        "ix_agent_memories_embedding",
        table_name="agent_memories",
        postgresql_using="ivfflat",
    )
    op.drop_index("ix_agent_memories_agent_id", table_name="agent_memories")
    op.drop_table("agent_memories")
    op.drop_table("teams")
    op.drop_table("tasks")
    op.drop_index("ix_knowledge_contexts_priority", table_name="knowledge_contexts")
    op.drop_index(
        "ix_knowledge_contexts_embedding",
        table_name="knowledge_contexts",
        postgresql_using="ivfflat",
    )
    op.drop_index("ix_knowledge_contexts_context_type", table_name="knowledge_contexts")
    op.drop_index("ix_knowledge_contexts_context_key", table_name="knowledge_contexts")
    op.drop_index("ix_knowledge_contexts_agent_id", table_name="knowledge_contexts")
    op.drop_table("knowledge_contexts")
    op.drop_table("webhook_endpoints")
    op.drop_table("webhook_deliveries")
    op.drop_table("integrations")
    op.drop_table("integration_logs")
    # ### end Alembic commands ###
